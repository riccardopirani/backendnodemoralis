openapi: 3.0.0
info:
  title: JetCV API
  description: API per gestione utenti, wallet e funzionalità blockchain JetCV
  version: 3.0.0

servers:
  - url: http://localhost:4000/api
  - url: http://127.0.0.1:4000/api

tags:
  - name: Wallet
    description: API gestione wallet
  - name: Blockchain
    description: API blockchain (NFT, certificazioni)
  - name: Settings
    description: Impostazioni contratto

paths:
  /cv/mint:
    post:
      tags: [Blockchain]
      summary: Mint NFT con userIdHash
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [address, uri, userIdHash]
              properties:
                address: { type: string, example: "0x123..." }
                uri: { type: string, example: "ipfs://..." }
                userIdHash: { type: string, example: "0xabc..." }
      responses:
        200:
          description: NFT creato
        400:
          description: Parametri mancanti
        500:
          description: Errore interno

  /cv/burn-migrate:
    post:
      tags: [Blockchain]
      summary: Brucia un NFT per migrazione
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user, reason, newContract]
              properties:
                user: { type: string }
                reason: { type: string }
                newContract: { type: string }
      responses:
        200:
          description: Token bruciato
        400:
          description: Parametri mancanti
        500:
          description: Errore interno

  /cv/{tokenId}/certification/reject:
    post:
      tags: [Blockchain]
      summary: Rifiuta certificazione di NFT
      parameters:
        - name: tokenId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [certIndex, reason]
              properties:
                certIndex: { type: integer }
                reason: { type: string }
      responses:
        200:
          description: Certificazione rifiutata
        400:
          description: Parametri mancanti
        500:
          description: Errore interno

  /cv/{tokenId}/isMinted:
    get:
      tags: [Blockchain]
      summary: Verifica se un tokenId è mintato
      parameters:
        - name: tokenId
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Stato del mint
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  minted: { type: boolean }

  /cv/all-tokenIds:
    get:
      tags: [Blockchain]
      summary: Ottieni tutti i tokenId mintati
      responses:
        200:
          description: Lista di tokenId
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenIds:
                    type: array
                    items: { type: string }

  /cv/{tokenId}:
    get:
      tags: [Blockchain]
      summary: Dettagli di un NFT
      parameters:
        - name: tokenId
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Dettagli NFT
        404:
          description: Non trovato
        500:
          description: Errore interno

  /user/{address}/hasCV:
    get:
      tags: [Blockchain]
      summary: Verifica se un utente ha un CV NFT
      parameters:
        - name: address
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Boolean

  /user/{address}/last-cert-approval:
    get:
      tags: [Blockchain]
      summary: Ottieni timestamp ultima approvazione certificato
      parameters:
        - name: address
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Timestamp ultima approvazione

  /settings/minApprovalDelay:
    get:
      tags: [Settings]
      summary: Ottieni delay minimo approvazione
      responses:
        200:
          description: Delay attuale
    post:
      tags: [Settings]
      summary: Imposta delay minimo approvazione
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delay: { type: integer }
      responses:
        200:
          description: Delay aggiornato

components:
  schemas:
    Wallet:
      type: object
      properties:
        id: { type: string, format: uuid }
        address: { type: string }
        createdAt: { type: string, format: date-time }
    WalletCreate:
      type: object
      required: [userId, address, privateKey]
      properties:
        userId: { type: string, format: uuid }
        address: { type: string }
        privateKey: { type: string }
        mnemonic: { type: string }
    WalletUpdate:
      type: object
      properties:
        address: { type: string }
        privateKey: { type: string }
        mnemonic: { type: string }