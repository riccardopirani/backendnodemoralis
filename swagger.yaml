openapi: 3.0.3
info:
  title: JetCV NFT API
  version: "1.0.0"
  description: |
    API per interazione con il contratto **JETCV** su EVM (Polygon) e gestione wallet utility.
    - Contratto: ERC721 con funzioni di mint personalizzate.
    - **Nota**: i campi numerici/grandi valori sono spesso espressi come **string** per evitare overflow su JSON.

servers:
  - url: http://localhost:4000
    description: Local dev

tags:
  - name: Utils
  - name: Wallet
  - name: Contract
  - name: NFT

paths:
  /api/cors-test:
    get:
      tags: [Utils]
      summary: Verifica CORS
      responses:
        "200":
          description: CORS OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "CORS test successful" }
                  timestamp: { type: string, format: date-time }
                  headers:
                    type: object
                  origin:
                    type: string
                  method:
                    type: string

  # ===================== WALLET =====================
  /api/wallet/create:
    post:
      tags: [Wallet]
      summary: Crea nuovo wallet locale
      responses:
        "200":
          description: Wallet creato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletCreateResponse"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/wallet/{address}/balance:
    get:
      tags: [Wallet]
      summary: Bilancio dell'indirizzo (native coin)
      parameters:
        - $ref: "#/components/parameters/AddressPath"
      responses:
        "200":
          description: Bilancio
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string, example: "0x1234..." }
                  balance: { type: string, description: "wei", example: "1000000000000000000" }
                  balanceEth: { type: string, example: "1.0" }
        "500":
          $ref: "#/components/responses/InternalError"

  /api/wallet/{address}/secret:
    get:
      tags: [Wallet]
      summary: Recupera il secret associato all'indirizzo (via script bash)
      parameters:
        - $ref: "#/components/parameters/AddressPath"
      responses:
        "200":
          description: Secret
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  secret: { type: string, nullable: true }
                  error: { type: string, nullable: true }
        "500":
          $ref: "#/components/responses/InternalError"

  /api/wallet/{address}/info:
    get:
      tags: [Wallet]
      summary: Info di base sull'indirizzo (balance + nonce)
      parameters:
        - $ref: "#/components/parameters/AddressPath"
      responses:
        "200":
          description: Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  balance: { type: string, description: "wei" }
                  balanceEth: { type: string }
                  nonce: { type: string }
        "500":
          $ref: "#/components/responses/InternalError"

  /api/wallet/{address}/gas-balance:
    get:
      tags: [Wallet]
      summary: Stima gas utilizzabile per l'indirizzo
      parameters:
        - $ref: "#/components/parameters/AddressPath"
      responses:
        "200":
          description: Stima gas e costi
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  balance: { type: string, description: "wei" }
                  balanceEth: { type: string }
                  gasPrice: { type: string, description: "wei/gas unit" }
                  estimatedGasCost: { type: string, description: "wei" }
                  estimatedGasCostEth: { type: string }
                  availableGas: { type: string, description: "wei rimanenti dopo 21000 gas @ gasPrice" }
                  availableGasEth: { type: string }
                  maxFeePerGas: { type: string }
                  maxPriorityFeePerGas: { type: string }
        "500":
          $ref: "#/components/responses/InternalError"

  # ===================== CONTRACT =====================
  /api/contract/info:
    get:
      tags: [Contract]
      summary: Info contratto (name, symbol, chainId)
      responses:
        "200":
          description: Info contratto
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string, example: "JETCV" }
                  symbol: { type: string, example: "JCV" }
                  contractAddress: { type: string }
                  chainId: { type: number, example: 137 }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/contract/version:
    get:
      tags: [Contract]
      summary: Versione del contratto (CONTRACT_VERSION)
      responses:
        "200":
          description: Versione
          content:
            application/json:
              schema:
                type: object
                properties:
                  contractAddress: { type: string }
                  version: { type: string, example: "1.0" }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/contract/owner:
    get:
      tags: [Contract]
      summary: Proprietario del contratto (Ownable)
      responses:
        "200":
          description: Owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner: { type: string, example: "0xabc..." }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/contract/transfer-ownership:
    post:
      tags: [Contract]
      summary: Trasferisce la proprietà del contratto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newOwner]
              properties:
                newOwner:
                  type: string
                  example: "0x1234567890abcdef1234567890abcdef12345678"
      responses:
        "200":
          description: Proprietà trasferita
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/contract/renounce-ownership:
    post:
      tags: [Contract]
      summary: Rinuncia alla proprietà del contratto
      responses:
        "200":
          description: Rinuncia riuscita
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/contract/supports-interface:
    get:
      tags: [Contract]
      summary: Verifica supporto di un'interfaccia ERC (ERC165)
      parameters:
        - in: query
          name: interfaceId
          required: true
          schema:
            type: string
            pattern: "^0x[0-9a-fA-F]{8}$"
            example: "0x80ac58cd"
          description: bytes4 (es. ERC721 = 0x80ac58cd)
      responses:
        "200":
          description: Risultato supporto
          content:
            application/json:
              schema:
                type: object
                properties:
                  interfaceId: { type: string }
                  supports: { type: boolean }
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  # ===================== NFT =====================
  /api/nft/mint/estimate-gas:
    post:
      tags: [NFT]
      summary: Stima del gas per il mint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MintRequest"
            examples:
              Example:
                value:
                  walletAddress: "0x1234567890abcdef1234567890abcdef12345678"
                  idUserActionHash: "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925" # 64 hex chars
                  uri: "ipfs://Qm.../metadata.json"
      responses:
        "200":
          description: Stima gas e costi
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GasEstimateResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/mint:
    post:
      tags: [NFT]
      summary: Mint di un nuovo token NFT (ritorna tokenId quando possibile)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MintRequest"
      responses:
        "200":
          description: Mint eseguito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "NFT mintato con successo" }
                  walletAddress: { type: string }
                  idUserActionHash: { type: string }
                  uri: { type: string }
                  tokenId: { type: string, nullable: true }
                  txHash: { type: string }
                  blockNumber: { type: number }
                  gasUsed: { type: string }
                  estimatedGas: { type: string }
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}:
    get:
      tags: [NFT]
      summary: Info complete su un token (owner, uri, userIdHash)
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      responses:
        "200":
          description: Info token
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  owner: { type: string }
                  uri: { type: string }
                  userIdHash: { type: string, description: "bytes32" }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/owner:
    get:
      tags: [NFT]
      summary: Proprietario di un token
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      responses:
        "200":
          description: Owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  owner: { type: string }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/uri:
    get:
      tags: [NFT]
      summary: URI del token
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      responses:
        "200":
          description: URI
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  uri: { type: string }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/user-hash:
    get:
      tags: [NFT]
      summary: bytes32 userIdHash associato al token
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      responses:
        "200":
          description: userIdHash
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  userIdHash: { type: string }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/user/{address}/balance:
    get:
      tags: [NFT]
      summary: Numero di token posseduti da un indirizzo
      parameters:
        - $ref: "#/components/parameters/AddressPath"
      responses:
        "200":
          description: Bilancio NFT
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  balance: { type: string }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/transfer:
    post:
      tags: [NFT]
      summary: Trasferisce un token (transferFrom)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [from, to, tokenId]
              type: object
              properties:
                from: { type: string, example: "0xaaa..." }
                to: { type: string, example: "0xbbb..." }
                tokenId: { type: string, example: "1" }
      responses:
        "200":
          description: Trasferimento eseguito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/safe-transfer:
    post:
      tags: [NFT]
      summary: Trasferisce un token (safeTransferFrom con/ senza data)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [from, to, tokenId]
              type: object
              properties:
                from: { type: string }
                to: { type: string }
                tokenId: { type: string }
                data: { type: string, nullable: true, description: "bytes (hex, es: 0x...)" }
      responses:
        "200":
          description: Trasferimento sicuro eseguito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/approved:
    get:
      tags: [NFT]
      summary: Indirizzo approvato per il token (getApproved)
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      responses:
        "200":
          description: Approved address
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId: { type: string }
                  approved: { type: string, example: "0x0000000000000000000000000000000000000000" }
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/approve:
    post:
      tags: [NFT]
      summary: Approva un indirizzo per il token
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [to]
              type: object
              properties:
                to: { type: string }
      responses:
        "200":
          description: Approvazione eseguita
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/set-approval-for-all:
    post:
      tags: [NFT]
      summary: Imposta approvazione per tutti i token verso un operatore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [operator, approved]
              type: object
              properties:
                operator: { type: string }
                approved: { type: boolean }
      responses:
        "200":
          description: Impostazione approvazione eseguita
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/is-approved-for-all:
    get:
      tags: [NFT]
      summary: Verifica se un operatore è approvato per tutti i token di un owner
      parameters:
        - in: query
          name: owner
          required: true
          schema: { type: string }
        - in: query
          name: operator
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Stato approvazione
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner: { type: string }
                  operator: { type: string }
                  isApproved: { type: boolean }
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

  /api/nft/token/{tokenId}/update-uri:
    post:
      tags: [NFT]
      summary: Aggiorna l'URI del token
      parameters:
        - $ref: "#/components/parameters/TokenIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [newUri]
              type: object
              properties:
                newUri: { type: string, example: "ipfs://Qm.../metadata.json" }
      responses:
        "200":
          description: URI aggiornato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TxBasicResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "503":
          $ref: "#/components/responses/ContractUnavailable"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  parameters:
    AddressPath:
      in: path
      name: address
      required: true
      schema:
        type: string
        example: "0x1234567890abcdef1234567890abcdef12345678"
    TokenIdPath:
      in: path
      name: tokenId
      required: true
      schema:
        type: string
        example: "1"

  schemas:
    WalletCreateResponse:
      type: object
      properties:
        message: { type: string, example: "Wallet creato con successo" }
        walletId: { type: string, example: "0xabc..." }
        mnemonic: { type: string, nullable: true, example: "saddle kiss ..." }
        scriptError: { type: boolean, example: false }
        output: { type: string, example: "script output" }

    GasEstimateResponse:
      type: object
      properties:
        estimatedGas: { type: string, example: "120000" }
        gasPrice: { type: string, example: "1000000000" }
        estimatedCost: { type: string, example: "120000000000000" }
        estimatedCostEth: { type: string, example: "0.00012" }
        maxFeePerGas: { type: string, example: "1000000000" }
        maxPriorityFeePerGas: { type: string, example: "30000000" }

    MintRequest:
      type: object
      required: [walletAddress, idUserActionHash, uri]
      properties:
        walletAddress:
          type: string
          example: "0x1234567890abcdef1234567890abcdef12345678"
        idUserActionHash:
          type: string
          description: "bytes32 (64 hex chars, senza 0x)"
          example: "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        uri:
          type: string
          example: "ipfs://Qm.../metadata.json"

    TxBasicResponse:
      type: object
      properties:
        message: { type: string, example: "Operazione eseguita con successo" }
        txHash: { type: string, example: "0x..." }
        blockNumber: { type: number, example: 50123456 }
        gasUsed: { type: string, example: "75000" }
        # opzionali a seconda della rotta:
        from: { type: string, nullable: true }
        to: { type: string, nullable: true }
        tokenId: { type: string, nullable: true }
        operator: { type: string, nullable: true }
        approved: { type: boolean, nullable: true }
        newUri: { type: string, nullable: true }
        newOwner: { type: string, nullable: true }

    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: "Messaggio di errore" }
        details: { type: string, nullable: true }

  responses:
    BadRequest:
      description: Parametri mancanti/invalidi
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            Missing:
              value:
                error: "Campi 'walletAddress', 'idUserActionHash' e 'uri' obbligatori"
    ContractUnavailable:
      description: Contratto non disponibile / non inizializzato
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: "Contratto non disponibile" }
              contractAddress: { type: string }
              message: { type: string, nullable: true }
    InternalError:
      description: Errore interno
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"