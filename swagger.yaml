openapi: 3.0.0
info:
  title: JetCV API
  description: API per gestione utenti, wallet e funzionalit√† blockchain JetCV
  version: 1.0.0

servers:
  - url: http://localhost:4000/api

tags:
  - name: User
    description: API gestione utenti (Prisma)
  - name: Wallet
    description: API gestione wallet (Prisma)
  - name: Wallet Home
    description: API blockchain (mint NFT, certificazioni)

paths:
  /users:
    post:
      tags: [User]
      summary: Crea un nuovo utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  minLength: 3
                  example: Mario Rossi
                email:
                  type: string
                  format: email
                  example: mario.rossi@example.com
                password:
                  type: string
                  minLength: 6
                  example: "mypassword123"
      responses:
        201:
          description: Utente creato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Errore di validazione
        500:
          description: Errore interno
    get:
      tags: [User]
      summary: Lista utenti
      responses:
        200:
          description: Lista di utenti
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      tags: [User]
      summary: Ottieni utente e wallet
      parameters:
        - name: id
          in: path
          schema: { type: integer }
          required: true
          example: 1
      responses:
        200:
          description: Dettaglio utente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithWallets"
        404:
          description: Utente non trovato
    put:
      tags: [User]
      summary: Aggiorna utente
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        200:
          description: Utente aggiornato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Validazione fallita
        404:
          description: Utente non trovato
    delete:
      tags: [User]
      summary: Elimina utente
      parameters:
        - name: id
          in: path
          schema: { type: integer }
      responses:
        200:
          description: Eliminazione riuscita
        404:
          description: Utente non trovato

  /wallets:
    post:
      tags: [Wallet]
      summary: Crea un nuovo wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, address, privateKey]
              properties:
                userId:
                  type: integer
                  example: 1
                address:
                  type: string
                  example: "0x1234567890abcdef"
                privateKey:
                  type: string
                  example: "0xabcdefabcdefabcdef"
                mnemonic:
                  type: string
                  example: "word1 word2 word3 ..."
      responses:
        201:
          description: Wallet creato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
    get:
      tags: [Wallet]
      summary: Lista di tutti i wallet
      responses:
        200:
          description: Lista wallet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wallet"

  /wallets/{id}:
    get:
      tags: [Wallet]
      summary: Ottieni un wallet
      parameters:
        - name: id
          in: path
          schema: { type: integer }
      responses:
        200:
          description: Dettaglio wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
    put:
      tags: [Wallet]
      summary: Aggiorna wallet
      parameters:
        - name: id
          in: path
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WalletUpdate"
      responses:
        200:
          description: Wallet aggiornato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
    delete:
      tags: [Wallet]
      summary: Elimina wallet
      parameters:
        - name: id
          in: path
          schema: { type: integer }
      responses:
        200:
          description: Wallet eliminato
        404:
          description: Non trovato

  /wallets/user/{userId}:
    get:
      tags: [Wallet]
      summary: Lista wallet per utente
      parameters:
        - name: userId
          in: path
          schema: { type: integer }
      responses:
        200:
          description: Lista wallet utente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wallet"

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: Mario Rossi }
        email: { type: string, example: mario@example.com }
        createdAt: { type: string, format: date-time }
    UserUpdate:
      type: object
      properties:
        name: { type: string, minLength: 3, example: Mario Rossi }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
    UserWithWallets:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            wallets:
              type: array
              items:
                $ref: "#/components/schemas/Wallet"
    Wallet:
      type: object
      properties:
        id: { type: integer, example: 10 }
        address: { type: string, example: "0x1234567890abcdef" }
        createdAt: { type: string, format: date-time }
        user:
          $ref: "#/components/schemas/User"
    WalletUpdate:
      type: object
      properties:
        address: { type: string }
        privateKey: { type: string }
        mnemonic: { type: string }