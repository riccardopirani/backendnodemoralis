openapi: 3.0.3
info:
  title: JetCV NFT API
  description: |
    API completa per la gestione di NFT tramite Crossmint e integrazione Veriff per autenticazione.

    ## üéØ Funzionalit√† principali:
    - **NFT Management**: Mint, batch mint, aggiornamento metadati
    - **Wallet Management**: Creazione wallet Solana sicuri
    - **CV Management**: Validazione e creazione file CV con IPFS
    - **Collection Management**: Informazioni collezioni NFT
    - **Veriff Integration**: Autenticazione e verifica documenti

    ## üîê Autenticazione:
    - API Key per Crossmint
    - Chiavi pubbliche/private per Veriff

    ## üåê Ambienti:
    - Sviluppo: `http://localhost:4000`
    - Staging: `http://18.102.14.247:4000`
    - Produzione: `https://api.jetcv.com`
  version: 3.0.0
  contact:
    name: JetCV Development Team
    email: support@jetcv.com
    url: https://jetcv.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000
    description: Development server (local)
  - url: http://18.102.14.247:4000
    description: External server (staging)
  - url: https://api.jetcv.com
    description: Production server

tags:
  - name: Wallet
    description: üè¶ Gestione wallet Solana con generazione sicura di chiavi Ed25519
  - name: CV
    description: üìÑ Validazione e creazione CV JSON con integrazione IPFS
  - name: NFT
    description: |
      üé® Operazioni NFT tramite Crossmint con integrazione IPFS

      ## üîß Funzionalit√†:
      - **Mint singolo e batch** con validazione indirizzi Ethereum
      - **Supporto Polygon** con formato corretto `polygon:address`
      - **Upload IPFS automatico** per CV JSON
      - **Gestione metadati completa** con attributi personalizzabili
      - **Monitoraggio stato** e aggiornamento metadati
      - **Paginazione avanzata** per collezioni grandi

      ## üöÄ Struttura Endpoint:
      - **POST** `/api/nft/mint` ‚Üí Router: `/nft/mint`
      - **POST** `/api/nft/mint/batch` ‚Üí Router: `/nft/mint/batch`
      - **GET** `/api/nft/status/{id}` ‚Üí Router: `/nft/status/:crossmintId`
      - **PATCH** `/api/nft/update/{id}` ‚Üí Router: `/nft/update/:crossmintId`
      - **GET** `/api/nft/metadata` ‚Üí Router: `/nft/metadata`
  - name: Collection
    description: üìö Gestione e monitoraggio collezioni NFT
  - name: System
    description: ‚öôÔ∏è API di sistema per test e monitoraggio
  - name: Veriff
    description: üîê Sistema completo di autenticazione e verifica identit√† tramite Veriff v1, inclusi webhook e monitoraggio stato

paths:
  /api/cors-test:
    get:
      tags: [System]
      summary: Test CORS
      description: Test per verificare la configurazione CORS e accessibilit√† esterna
      responses:
        "200":
          description: Test CORS riuscito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "CORS test successful" }
                  timestamp: { type: string, format: date-time }
                  headers: { type: object }
                  origin: { type: string, nullable: true }
                  method: { type: string }

  /api/swagger-test:
    get:
      tags: [System]
      summary: Test Swagger e Accesso Esterno
      description: Test specifico per verificare l'accesso da Swagger UI e da IP esterni
      responses:
        "200":
          description: Test Swagger riuscito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Swagger test successful" }
                  timestamp: { type: string, format: date-time }
                  origin: { type: string, nullable: true }
                  clientIP: { type: string }
                  userAgent: { type: string }
                  method: { type: string }
                  serverPort: { type: string }
                  corsEnabled: { type: boolean }
                  swaggerAccessible: { type: boolean }
                  externalAccess: { type: boolean }

  /api/wallet/create:
    post:
      tags: [Wallet]
      summary: Crea wallet Solana
      description: Crea un nuovo wallet Solana con generazione sicura di chiavi Ed25519
      responses:
        "200":
          description: Wallet creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  wallet:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                        description: "Indirizzo pubblico del wallet Solana"
                      privateKey:
                        type: string
                        example: "4NwwCq5a6hCF5G33X9QwQ8ejjgfH_MaLjr4nKsNUJCT1..."
                        description: "Chiave privata codificata Base58"
                      network:
                        type: string
                        example: "solana"
                        description: "Rete blockchain supportata"
                      keypairType:
                        type: string
                        example: "ed25519"
                        description: "Tipo di algoritmo per le chiavi"
                  message:
                    {
                      type: string,
                      example: "Wallet Solana creato con successo",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error:
                    {
                      type: string,
                      example: "Errore durante la creazione del wallet",
                    }

  /api/cv/validate-and-create:
    post:
      tags: [CV]
      summary: Valida e crea CV JSON
      description: Valida un JSON CV e crea un file sul filesystem con upload IPFS integrato
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jsonCV]
              properties:
                jsonCV:
                  type: object
                  description: "Oggetto JSON del CV da validare, creare e caricare su IPFS"
                  example:
                    name: "Mario Rossi"
                    email: "mario.rossi@email.com"
                    skills: ["JavaScript", "Node.js", "React"]
                    experience: "5 anni"
                    education: "Laurea in Informatica"
                filename:
                  type: string
                  default: "cv.json"
                  description: "Nome del file da creare (opzionale)"
                  example: "mario-rossi-cv.json"
      responses:
        "200":
          description: CV JSON validato e creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "CV JSON validato e creato con successo",
                    }
                  filename:
                    { type: string, description: "Nome del file creato" }
                  filePath:
                    { type: string, description: "Percorso completo del file" }
                  fileSize:
                    {
                      type: integer,
                      description: "Dimensione del file in bytes",
                    }
                  validation:
                    type: object
                    properties:
                      isValid: { type: boolean }
                      requiredFields: { type: array, items: { type: string } }
                      receivedFields: { type: array, items: { type: string } }
                      totalFields: { type: integer }
                  cv: { type: object }
                  note: { type: string }
        "400":
          description: Errore di validazione
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
                  details: { type: string }
                  receivedData: { type: object, nullable: true }
                  missingFields:
                    { type: array, items: { type: string }, nullable: true }
                  receivedFields:
                    { type: array, items: { type: string }, nullable: true }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
                  details: { type: string }

  /api/veriff/session-request-veriff:
    post:
      tags: [Veriff]
      summary: Richiesta sessione Veriff
      description: Crea una sessione di verifica tramite l'API Veriff v1 con parametri personalizzabili
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callback:
                  type: string
                  format: uri
                  example: "https://example.com/callback"
                  description: "URL di callback per le notifiche webhook (opzionale)"
                  default: "https://example.com/callback"
                firstName:
                  type: string
                  example: "riccardo"
                  description: "Nome della persona (opzionale)"
                  default: "riccardo"
                lastName:
                  type: string
                  example: "Doe"
                  description: "Cognome della persona (opzionale)"
                  default: "Doe"
                additionalFields:
                  type: object
                  description: "Campi aggiuntivi da includere nella richiesta (opzionale)"
                  example:
                    email: "riccardo.doe@example.com"
                    phoneNumber: "1234567890"
                    gender: "M"
                    dateOfBirth: "1990-01-01"
                    fullAddress: "123 Main Street, City, Country"
                    vendorData: "user-123"
                    endUserId: "riccardo-doe-123"
                  properties:
                    email:
                      {
                        type: string,
                        format: email,
                        description: "Indirizzo email",
                      }
                    phoneNumber:
                      { type: string, description: "Numero di telefono" }
                    gender:
                      {
                        type: string,
                        enum: ["M", "F"],
                        description: "Genere (M/F)",
                      }
                    dateOfBirth:
                      {
                        type: string,
                        format: date,
                        description: "Data di nascita (YYYY-MM-DD)",
                      }
                    fullAddress:
                      { type: string, description: "Indirizzo completo" }
                    vendorData:
                      {
                        type: string,
                        description: "Dati personalizzati del vendor",
                      }
                    endUserId: { type: string, description: "ID utente finale" }
      responses:
        "200":
          description: Sessione creata con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Test richiesta minima riuscito" }
                  receivedParams: { type: object }
                  builtData: { type: object }
                  response: { type: object }
                  sessionId:
                    {
                      type: string,
                      nullable: true,
                      example: "17e5c1b3-8b23-4a5a-8a09-f86bccaeb063",
                    }
                  sessionUrl:
                    {
                      type: string,
                      nullable: true,
                      example: "https://alchemy.veriff.com/session/17e5c1b3-8b23-4a5a-8a09-f86bccaeb063",
                    }
                  verificationUrl:
                    {
                      type: string,
                      nullable: true,
                      example: "https://station.veriff.com/sdk/17e5c1b3-8b23-4a5a-8a09-f86bccaeb063",
                    }
                  note:
                    {
                      type: string,
                      example: "Questa struttura dati funziona con l'API Veriff v1",
                    }
        "400":
          description: Errore nella richiesta
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error:
                    { type: string, example: "Test richiesta minima fallito" }
                  details: { type: object }
                  status: { type: integer, example: 400 }
                  note:
                    {
                      type: string,
                      example: "Controlla i log per vedere l'errore specifico",
                    }
        "401":
          description: Autenticazione Veriff fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore API Veriff" }
                  details: { type: object }
                  status: { type: integer, example: 401 }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore interno del server" }
        "503":
          description: API Veriff non raggiungibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error:
                    {
                      type: string,
                      example: "Impossibile raggiungere l'API Veriff",
                    }
                  details:
                    { type: string, example: "Timeout o errore di connessione" }

  /api/nft/mint:
    post:
      tags: [NFT]
      summary: Mint di un nuovo NFT
      description: |
        Mint di un nuovo NFT tramite Crossmint con integrazione IPFS per CV.

        ## üîß Funzionalit√†:
        - **Validazione indirizzo Ethereum**: Verifica formato 0x[a-fA-F0-9]{40}
        - **Supporto Polygon**: Formato corretto `polygon:address`
        - **Upload IPFS automatico**: Se fornito jsonCV, viene caricato su IPFS
        - **Metadati dinamici**: Supporto per name, description, animation_url, attributes

        ## üìÅ Parametri:
        - `to`: Indirizzo Ethereum valido del destinatario
        - `uri`: URI dell'immagine/metadati NFT
        - `metadata`: Metadati opzionali dell'NFT
        - `jsonCV`: JSON del CV da caricare su IPFS (opzionale)

        ## üöÄ Endpoint:
        - **POST** `/api/nft/mint` ‚Üí Montato su `/nft/mint` nel router
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [to, uri]
              properties:
                to:
                  type: string
                  pattern: "^0x[a-fA-F0-9]{40}$"
                  example: "0x198c9B45EcFFb65924D20EAeC07776af6975d8B7"
                  description: "Indirizzo Ethereum del destinatario (formato 0x...)"
                uri:
                  type: string
                  example: "https://example.com/image.png"
                  description: "URI dell'immagine o metadati dell'NFT"
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "JetCV NFT #1"
                      description: "Nome dell'NFT"
                    description:
                      type: string
                      example: "NFT unico creato tramite JetCV"
                      description: "Descrizione dell'NFT"
                    animation_url:
                      type: string
                      example: "https://example.com/animation.mp4"
                      description: "URL dell'animazione (opzionale)"
                    attributes:
                      type: array
                      items:
                        type: object
                        properties:
                          trait_type:
                            type: string
                            example: "Rarity"
                            description: "Tipo di attributo"
                          value:
                            type: string
                            example: "Legendary"
                            description: "Valore dell'attributo"
                jsonCV:
                  type: object
                  description: "JSON del CV da creare e caricare su IPFS (opzionale)"
                  example:
                    name: "Mario Rossi"
                    email: "mario.rossi@email.com"
                    skills: ["JavaScript", "Node.js", "React"]
                    experience: "5 anni"
                    education: "Laurea in Informatica"
      responses:
        "200":
          description: NFT mintato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "NFT mintato con successo tramite Crossmint",
                    }
                  to:
                    { type: string, description: "Indirizzo del destinatario" }
                  uri:
                    type: string
                    description: "URI finale dell'NFT (IPFS se fornito jsonCV)"
                  metadata:
                    type: object
                    description: "Metadati dell'NFT inviati a Crossmint"
                  collectionId:
                    type: string
                    description: "ID della collezione Crossmint"
                  crossmintId:
                    type: string
                    description: "ID dell'NFT su Crossmint"
                  status:
                    type: string
                    description: "Status dell'NFT (onChain.status o status)"
                  chain:
                    type: string
                    example: "polygon"
                    description: "Blockchain utilizzata"
                  contractAddress:
                    type: string
                    nullable: true
                    description: "Indirizzo del contratto smart contract"
                  actionId:
                    type: string
                    nullable: true
                    description: "ID dell'azione Crossmint"
                  ipfs:
                    type: object
                    description: "Dettagli IPFS se fornito jsonCV"
                    properties:
                      cid:
                        type: string
                        description: "Content Identifier IPFS"
                      ipfsUrl:
                        type: string
                        description: "URL IPFS completo (ipfs://CID)"
                      gatewayUrl:
                        type: string
                        description: "URL gateway Lighthouse IPFS"
                      success:
                        type: boolean
                        description: "Se il caricamento IPFS √® riuscito"
                      error:
                        type: string
                        nullable: true
                        description: "Messaggio di errore se fallisce"
                  hasCV:
                    type: boolean
                    description: "Se √® stato fornito un jsonCV"
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Campi 'to' e 'uri' obbligatori"
                    description: "Errore di validazione"
                  details:
                    type: string
                    example: "Indirizzo 'to' non valido - deve essere formato 0x..."
                    description: "Dettagli dell'errore"
                  ipfs:
                    type: object
                    description: "Dettagli IPFS anche in caso di errore"
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Errore durante il minting tramite Crossmint"
                  details:
                    type: string
                    example: "Verifica i parametri e la configurazione"
                  ipfs:
                    type: object
                    description: "Dettagli IPFS anche in caso di errore"

  /api/nft/mint/batch:
    post:
      tags: [NFT]
      summary: Batch mint di NFT
      description: |
        Mint di pi√π NFT in batch tramite Crossmint.

        ## üîß Funzionalit√†:
        - **Validazione indirizzi**: Verifica formato Ethereum per ogni destinatario
        - **Metadati personalizzati**: Supporto per name, description, animation_url, attributes
        - **Supporto CV**: Possibilit√† di includere jsonCV per ogni NFT
        - **Processamento parallelo**: Creazione simultanea di pi√π NFT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nfts]
              properties:
                nfts:
                  type: array
                  items:
                    type: object
                    required: [to, uri]
                    properties:
                      to:
                        type: string
                        pattern: "^0x[a-fA-F0-9]{40}$"
                        example: "0x198c9B45EcFFb65924D20EAeC07776af6975d8B7"
                        description: "Indirizzo Ethereum del destinatario (formato 0x...)"
                      uri:
                        type: string
                        example: "https://example.com/image.png"
                        description: "URI dell'immagine o metadati dell'NFT"
                      metadata:
                        type: object
                        description: "Metadati dell'NFT"
                        properties:
                          name: { type: string, example: "NFT Name" }
                          description:
                            { type: string, example: "NFT Description" }
                          animation_url:
                            {
                              type: string,
                              example: "https://example.com/animation.mp4",
                            }
                          attributes:
                            type: array
                            items:
                              type: object
                              properties:
                                trait_type: { type: string, example: "Rarity" }
                                value: { type: string, example: "Legendary" }
                      jsonCV:
                        type: object
                        description: "JSON del CV da caricare su IPFS (opzionale)"
                        example:
                          name: "Test User"
                          email: "test@example.com"
                          skills: ["JavaScript", "React"]
                  description: "Array di NFT da mintare"
      responses:
        "200":
          description: Batch mint avviato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    type: string
                    example: "NFT batch creati con successo"
                  batch:
                    type: object
                    description: "Risposta completa da Crossmint"
                    properties:
                      nfts:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: string, description: "ID dell'NFT" }
                            status:
                              { type: string, description: "Status dell'NFT" }
                            recipient:
                              { type: string, description: "Destinatario" }
                            metadata:
                              { type: object, description: "Metadati dell'NFT" }
                      total:
                        { type: integer, description: "Numero totale di NFT" }
                      batchId: { type: string, description: "ID del batch" }
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    { type: string, example: "Parametri mancanti o non validi" }
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/nft/status/{crossmintId}:
    get:
      tags: [NFT]
      summary: Stato di un NFT
      description: |
        Recupera lo stato di un NFT tramite Crossmint ID.

        ## üîß Funzionalit√†:
        - **Stato completo**: Status corrente e on-chain dell'NFT
        - **Dati metadati**: Informazioni complete sui metadati
        - **Dettagli blockchain**: Chain, contratto, hash transazione
        - **Informazioni temporali**: Date di creazione e aggiornamento
      parameters:
        - name: crossmintId
          in: path
          required: true
          schema:
            type: string
          description: ID Crossmint dell'NFT
      responses:
        "200":
          description: Stato NFT recuperato
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  nft:
                    type: object
                    description: "Dati completi dell'NFT da Crossmint"
                    properties:
                      id: { type: string, description: "ID dell'NFT" }
                      crossmintId: { type: string, description: "ID Crossmint" }
                      status: { type: string, description: "Status corrente" }
                      metadata:
                        { type: object, description: "Metadati dell'NFT" }
                      recipient: { type: string, description: "Destinatario" }
                      collectionId:
                        { type: string, description: "ID collezione" }
                      onChain:
                        type: object
                        description: "Dati on-chain dell'NFT"
                        properties:
                          status:
                            { type: string, description: "Status on-chain" }
                          chain: { type: string, description: "Blockchain" }
                          contractAddress:
                            { type: string, description: "Contratto" }
                          txHash:
                            { type: string, description: "Hash transazione" }
                      createdAt: { type: string, format: date-time }
                      updatedAt: { type: string, format: date-time }
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/nft/update/{crossmintId}:
    patch:
      tags: [NFT]
      summary: Aggiorna metadati NFT
      description: |
        Aggiorna i metadati di un NFT esistente tramite Crossmint.

        ## üîß Funzionalit√†:
        - **Aggiornamento flessibile**: Supporto per tutti i campi metadati
        - **Validazione dati**: Controllo integrit√† metadati
        - **Preservazione esistente**: Mantiene i dati non modificati
        - **Risposta completa**: Dati aggiornati dell'NFT
      parameters:
        - name: crossmintId
          in: path
          required: true
          schema:
            type: string
          description: ID Crossmint dell'NFT da aggiornare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [metadata]
              properties:
                metadata:
                  type: object
                  description: Metadati da aggiornare
                  properties:
                    name:
                      {
                        type: string,
                        example: "Updated NFT Name",
                        description: "Nome dell'NFT",
                      }
                    description:
                      {
                        type: string,
                        example: "New description",
                        description: "Descrizione dell'NFT",
                      }
                    image:
                      {
                        type: string,
                        example: "https://new-image-url.com/image.png",
                        description: "URL dell'immagine",
                      }
                    animation_url:
                      {
                        type: string,
                        description: "URL dell'animazione (opzionale)",
                      }
                    attributes:
                      type: array
                      description: Attributi dell'NFT
                      items:
                        type: object
                        properties:
                          trait_type: { type: string }
                          value: { type: string }
      responses:
        "200":
          description: NFT aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    type: string
                    example: "NFT aggiornato con successo"
                  nft:
                    type: object
                    description: "Dati aggiornati dell'NFT da Crossmint"
                    properties:
                      id: { type: string, description: "ID dell'NFT" }
                      crossmintId: { type: string, description: "ID Crossmint" }
                      status: { type: string, description: "Status corrente" }
                      metadata:
                        { type: object, description: "Metadati aggiornati" }
                      recipient: { type: string, description: "Destinatario" }
                      collectionId:
                        { type: string, description: "ID collezione" }
                      onChain:
                        type: object
                        description: "Dati on-chain dell'NFT"
                        properties:
                          status:
                            { type: string, description: "Status on-chain" }
                          chain: { type: string, description: "Blockchain" }
                          contractAddress:
                            { type: string, description: "Contratto" }
                          txHash:
                            { type: string, description: "Hash transazione" }
                      createdAt: { type: string, format: date-time }
                      updatedAt: { type: string, format: date-time }
        "400":
          description: Richiesta non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    { type: string, example: "Parametri mancanti o non validi" }
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/nft/metadata:
    get:
      tags: [NFT]
      summary: Recupera tutti gli NFT della collezione
      description: |
        Recupera tutti gli NFT con i loro metadati dalla collezione Crossmint.

        ## üîß Funzionalit√†:
        - **Paginazione avanzata**: Supporto per page e perPage
        - **Formattazione dati**: Dati formattati per facile utilizzo
        - **Metadati completi**: Nome, descrizione, immagine, attributi
        - **Informazioni temporali**: Date di creazione e aggiornamento
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Numero di pagina
        - name: perPage
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Numero di NFT per pagina
      responses:
        "200":
          description: Tutti gli NFT della collezione recuperati con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    { type: string, example: "NFT recuperati con successo" }
                  success: { type: boolean, example: true }
                  nfts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, description: "ID dell'NFT" }
                        crossmintId:
                          { type: string, description: "ID Crossmint" }
                        name: { type: string, description: "Nome dell'NFT" }
                        description:
                          { type: string, description: "Descrizione dell'NFT" }
                        image: { type: string, description: "URL immagine" }
                        animation_url:
                          { type: string, description: "URL animazione" }
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              trait_type:
                                { type: string, description: "Tipo attributo" }
                              value:
                                {
                                  type: string,
                                  description: "Valore attributo",
                                }
                        recipient: { type: string, description: "Destinatario" }
                        status: { type: string, description: "Status dell'NFT" }
                        createdAt: { type: string, format: date-time }
                        updatedAt: { type: string, format: date-time }
                  pagination:
                    type: object
                    properties:
                      page: { type: integer, example: 1 }
                      perPage: { type: integer, example: 10 }
                      total: { type: integer, example: 50 }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/collection/info:
    get:
      tags: [Collection]
      summary: Informazioni collezione
      description: Recupera informazioni dettagliate sulla collezione NFT
      responses:
        "200":
          description: Info collezione
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionId: { type: string }
                  name: { type: string }
                  symbol: { type: string }
                  description: { type: string }
                  image: { type: string, nullable: true }
                  status: { type: string }
                  createdAt: { type: string, format: date-time }
                  updatedAt: { type: string, format: date-time }
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/collection/nfts:
    get:
      tags: [Collection]
      summary: NFT della collezione
      description: Recupera gli NFT di una collezione
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Numero di pagina
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Numero di NFT per pagina
      responses:
        "200":
          description: NFT della collezione
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionId: { type: string }
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
                  nfts: { type: array, items: { type: object } }
        "503":
          description: Crossmint non disponibile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    {
                      type: string,
                      example: "Crossmint API key non configurata",
                    }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Errore interno del server" }

  /api/veriff/session/{sessionId}:
    get:
      tags: [Veriff]
      summary: Verifica stato sessione
      description: Recupera lo stato di una sessione di verifica esistente tramite sessionId
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: ID della sessione Veriff da verificare
          example: "17e5c1b3-8b23-4a5a-8a09-f86bccaeb063"
      responses:
        "200":
          description: Stato sessione recuperato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Stato sessione recuperato con successo",
                    }
                  sessionId:
                    {
                      type: string,
                      example: "17e5c1b3-8b23-4a5a-8a09-f86bccaeb063",
                    }
                  sessionData:
                    {
                      type: object,
                      description: "Dati completi della sessione",
                    }
                  status:
                    {
                      type: string,
                      example: "approved",
                      description: "Status corrente della verifica",
                    }
                  createdAt:
                    {
                      type: string,
                      format: date-time,
                      description: "Data creazione sessione",
                    }
                  updatedAt:
                    {
                      type: string,
                      format: date-time,
                      description: "Data ultimo aggiornamento",
                    }
        "400":
          description: Errore nella richiesta
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore recupero sessione" }
                  details: { type: object }
                  status: { type: integer, example: 400 }
                  sessionId: { type: string }
        "401":
          description: Autenticazione Veriff fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore API Veriff" }
                  details: { type: object }
                  status: { type: integer, example: 401 }
        "404":
          description: Sessione non trovata
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Sessione non trovata" }
                  details: { type: object }
                  status: { type: integer, example: 404 }

  /api/veriff/verification/{verificationId}:
    get:
      tags: [Veriff]
      summary: Dettagli verifica completata
      description: Recupera i dettagli completi di una verifica completata tramite verificationId
      parameters:
        - name: verificationId
          in: path
          required: true
          schema:
            type: string
          description: ID della verifica completata
          example: "ver_1234567890abcdef"
      responses:
        "200":
          description: Dettagli verifica recuperati con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Dettagli verifica recuperati con successo",
                    }
                  verificationId:
                    { type: string, example: "ver_1234567890abcdef" }
                  verificationData:
                    {
                      type: object,
                      description: "Dati completi della verifica",
                    }
                  status:
                    {
                      type: string,
                      example: "approved",
                      description: "Status finale della verifica",
                    }
                  person:
                    {
                      type: object,
                      description: "Dati della persona verificata",
                    }
                  document:
                    {
                      type: object,
                      description: "Dati del documento verificato",
                    }
                  address: { type: object, description: "Indirizzo verificato" }
                  createdAt:
                    {
                      type: string,
                      format: date-time,
                      description: "Data creazione verifica",
                    }
                  updatedAt:
                    {
                      type: string,
                      format: date-time,
                      description: "Data ultimo aggiornamento",
                    }
        "400":
          description: Errore nella richiesta
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore recupero verifica" }
                  details: { type: object }
                  status: { type: integer, example: 400 }
                  verificationId: { type: string }
        "401":
          description: Autenticazione Veriff fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore API Veriff" }
                  details: { type: object }
                  status: { type: integer, example: 401 }
        "404":
          description: Verifica non trovata
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Verifica non trovata" }
                  details: { type: object }
                  status: { type: integer, example: 404 }

  /api/veriff/webhook:
    post:
      tags: [Veriff]
      summary: Webhook Veriff
      description: Endpoint per ricevere notifiche webhook da Veriff sui cambiamenti di stato delle verifiche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Dati del webhook inviati da Veriff"
              properties:
                type:
                  type: string
                  description: "Tipo di evento webhook"
                  example: "verification_approved"
                  enum:
                    [
                      "session_created",
                      "verification_approved",
                      "verification_declined",
                      "verification_expired",
                    ]
                verification:
                  type: object
                  description: "Dati della verifica"
                  properties:
                    id:
                      {
                        type: string,
                        description: "ID della sessione/verifica",
                      }
                    status:
                      {
                        type: string,
                        description: "Nuovo status della verifica",
                      }
                    person: { type: object, description: "Dati della persona" }
                    document:
                      { type: object, description: "Dati del documento" }
                    address:
                      { type: object, description: "Indirizzo verificato" }
                    createdAt: { type: string, format: date-time }
                    updatedAt: { type: string, format: date-time }
      responses:
        "200":
          description: Webhook processato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Webhook processato con successo" }
                  eventType: { type: string, example: "verification_approved" }
                  sessionId:
                    {
                      type: string,
                      example: "17e5c1b3-8b23-4a5a-8a09-f86bccaeb063",
                    }
                  status: { type: string, example: "approved" }
                  timestamp: { type: string, format: date-time }
        "401":
          description: Firma webhook non valida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: "Firma non valida" }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error:
                    { type: string, example: "Errore processamento webhook" }
                  details: { type: string }

  /api/veriff/test:
    get:
      tags: [Veriff]
      summary: Test configurazione Veriff
      description: Endpoint di test per verificare la configurazione delle API Veriff
      responses:
        "200":
          description: Test configurazione riuscito
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "API Veriff funzionante" }
                  config:
                    type: object
                    properties:
                      publicKey: { type: string, example: "Configurato" }
                      privateKey: { type: string, example: "Configurato" }
                      baseUrl:
                        {
                          type: string,
                          example: "https://stationapi.veriff.com/v1",
                        }
                  endpoints:
                    type: object
                    properties:
                      createSession:
                        {
                          type: string,
                          example: "POST /api/veriff/session-request-veriff",
                        }
                      getSession:
                        {
                          type: string,
                          example: "GET /api/veriff/session/:sessionId",
                        }
                      getVerification:
                        {
                          type: string,
                          example: "GET /api/veriff/verification/:verificationId",
                        }
                      webhook:
                        { type: string, example: "POST /api/veriff/webhook" }
                      test: { type: string, example: "GET /api/veriff/test" }
                  timestamp: { type: string, format: date-time }
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Errore test API" }
                  details: { type: string }

components:
  schemas:
    Wallet:
      type: object
      description: "Wallet Solana con chiavi sicure"
      properties:
        address:
          type: string
          description: "Indirizzo pubblico del wallet Solana"
          example: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
        privateKey:
          type: string
          description: "Chiave privata codificata Base58"
          example: "4NwwCq5a6hCF5G33X9QwQ8ejjgfH_MaLjr4nKsNUJCT1..."
        network:
          type: string
          description: "Rete blockchain supportata"
          example: "solana"
        keypairType:
          type: string
          description: "Tipo di algoritmo per le chiavi"
          example: "ed25519"

    NFTMetadata:
      type: object
      description: "Metadati standard per NFT con supporto esteso"
      properties:
        name:
          type: string
          description: "Nome dell'NFT"
          example: "JetCV NFT #1"
        symbol:
          type: string
          description: "Simbolo dell'NFT"
          example: "JCV"
        description:
          type: string
          description: "Descrizione dettagliata dell'NFT"
          example: "Un NFT unico creato tramite JetCV"
        image:
          type: string
          description: "URL dell'immagine principale"
          example: "https://example.com/image.png"
        animation_url:
          type: string
          description: "URL per animazioni o media aggiuntivi"
          example: "https://example.com/animation.mp4"
        attributes:
          type: array
          description: "Attributi personalizzati dell'NFT"
          items:
            type: object
            properties:
              trait_type:
                type: string
                description: "Tipo di attributo"
                example: "Rarity"
              value:
                type: string
                description: "Valore dell'attributo"
                example: "Legendary"

    IPFSData:
      type: object
      description: "Dati IPFS per upload file"
      properties:
        cid:
          type: string
          description: "Content Identifier (CID) IPFS da Lighthouse"
          example: "QmHash..."
        ipfsUrl:
          type: string
          description: "URL IPFS completo (ipfs://CID)"
          example: "ipfs://QmHash..."
        gatewayUrl:
          type: string
          description: "URL gateway Lighthouse IPFS"
          example: "https://gateway.lighthouse.storage/ipfs/QmHash..."
        success:
          type: boolean
          description: "Se il caricamento IPFS √® riuscito"
        error:
          type: string
          nullable: true
          description: "Messaggio di errore se fallisce"

    ErrorResponse:
      type: object
      description: "Risposta standardizzata per errori API"
      properties:
        success:
          type: boolean
          example: false
          description: "Indica se l'operazione √® riuscita"
        error:
          type: string
          example: "Messaggio di errore descrittivo"
          description: "Descrizione chiara dell'errore"
        details:
          type: string
          nullable: true
          example: "Dettagli tecnici aggiuntivi dell'errore"
          description: "Dettagli tecnici dell'errore (opzionale)"
        status:
          type: integer
          example: 400
          description: "Codice di stato HTTP dell'errore"
        note:
          type: string
          example: "Controlla i log per vedere l'errore specifico"
          description: "Note aggiuntive per la risoluzione dell'errore"

  responses:
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                { type: string, example: "Parametri mancanti o non validi" }
              message: { type: string, nullable: true }

    CrossmintUnavailable:
      description: Crossmint non disponibile
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                { type: string, example: "Crossmint API key non configurata" }
              message:
                {
                  type: string,
                  example: "Imposta CROSSMINT_API_KEY nel file .env",
                }

    InternalError:
      description: Errore interno del server
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: "Errore interno del server" }
              details: { type: string, nullable: true }

    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string, example: "Risorsa non trovata" }

securitySchemes:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-KEY
    description: Crossmint API Key per autenticazione

security:
  - ApiKeyAuth: []
