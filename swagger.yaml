openapi: 3.0.0
info:
  title: JetCV NFT API
  description: Comprehensive API for managing JetCV NFTs, certifications, and wallet operations
  version: 1.0.3
  contact:
    name: JetCV Team
    email: support@jetcv.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api
    description: Development server
  - url: http://127.0.0.1:4000/api
    description: Local development
  - url: https://api.jetcv.com/api
    description: Production server

tags:
  - name: Wallet Management
    description: Wallet creation and management operations
  - name: NFT Management
    description: NFT operations and queries
  - name: Minting
    description: NFT minting operations
  - name: Certifications
    description: Certification management
  - name: Migration
    description: NFT migration operations
  - name: Ownership
    description: Contract ownership management
  - name: Approvals
    description: Token approval management
  - name: Transfers
    description: Token transfer operations
  - name: Interface Support
    description: Interface support queries
  - name: Legacy APIs
    description: Backward compatibility endpoints

paths:
  # ======================== WALLET MANAGEMENT ========================
  /wallet/create:
    post:
      tags: [Wallet Management]
      summary: Create a new Ethereum wallet
      description: Creates a new Ethereum wallet and stores credentials in Keycloak
      responses:
        200:
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletCreateResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /wallet/{address}/balance:
    get:
      tags: [Wallet Management]
      summary: Get wallet balance
      description: Returns the MATIC balance for a wallet address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Wallet balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalance'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /wallet/{address}/gas-balance:
    get:
      tags: [Wallet Management]
      summary: Get wallet gas balance
      description: Returns the gas balance and current gas price for a wallet address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x971b90678bED62982f34Fe8eB756fF02F322fA19"
      responses:
        200:
          description: Gas balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GasBalance'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /wallet/{address}/secret:
    get:
      tags: [Wallet Management]
      summary: Get wallet secrets
      description: Retrieves encrypted wallet credentials from Keycloak
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Wallet secrets retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletSecret'
        404:
          description: Wallet not found in Keycloak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /token/{address}:
    get:
      tags: [Wallet Management]
      summary: Get token balances
      description: Returns token balances for an address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Token balances retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBalance'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== NFT MANAGEMENT ========================
  /nft/contract-info:
    get:
      tags: [NFT Management]
      summary: Get contract information
      description: Returns basic contract information including name, symbol, and version
      responses:
        200:
          description: Contract information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractInfo'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/user/{address}/hasJetCV:
    get:
      tags: [NFT Management]
      summary: Check if user has JetCV
      description: Checks if a user has a JetCV NFT
      parameters:
        - name: address
          in: path
        required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: JetCV ownership status retrieved successfully
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/HasJetCVResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/user/{address}/hasCV:
    get:
      tags: [NFT Management]
      summary: Check if user has CV
      description: Checks if a user has a CV
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: CV ownership status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasCVResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/user/{address}/tokenId:
    get:
      tags: [NFT Management]
      summary: Get user token ID
      description: Returns the token ID for a user's address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Token ID retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenIdResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/token/{tokenId}:
    get:
      tags: [NFT Management]
      summary: Get token details
      description: Returns comprehensive token information including owner, URI, and userIdHash
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetails'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/token/{tokenId}/isMinted:
    get:
      tags: [NFT Management]
      summary: Check if token is minted
      description: Checks if a token ID has been minted
      parameters:
        - name: tokenId
          in: path
        required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token minted status retrieved successfully
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/TokenMintedResponse'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/token/{tokenId}/owner:
    get:
      tags: [NFT Management]
      summary: Get token owner
      description: Returns the owner of a specific token
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenOwner'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/token/{tokenId}/uri:
    get:
      tags: [NFT Management]
      summary: Get token URI
      description: Returns the URI for a token's metadata
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token URI retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenURI'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/user/{address}/balance:
    get:
      tags: [NFT Management]
      summary: Get user NFT balance
      description: Returns the number of NFTs owned by an address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: NFT balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTBalance'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/all-tokenIds:
    get:
      tags: [NFT Management]
      summary: Get all token IDs
      description: Returns all minted token IDs
      responses:
        200:
          description: All token IDs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTokenIds'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/all-tokens:
    get:
      tags: [NFT Management]
      summary: Get all tokens
      description: Returns detailed information for all tokens
      responses:
        200:
          description: All tokens retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTokens'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== MINTING ========================
  /nft/mint/estimate-gas:
    post:
      tags: [Minting]
      summary: Estimate gas for minting
      description: Estimates the gas cost for minting a JetCV NFT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintRequest'
      responses:
        200:
          description: Gas estimation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GasEstimation'
        400:
          description: Bad request - missing parameters or user already has JetCV
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/mint:
    post:
      tags: [Minting]
      summary: Mint JetCV NFT
      description: Mints a new JetCV NFT for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintRequest'
      responses:
        200:
          description: JetCV minted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MintResponse'
        400:
          description: Bad request - missing parameters or user already has JetCV
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== CERTIFICATIONS ========================
  /certifications/token/{tokenId}:
    get:
      tags: [Certifications]
      summary: Get token certifications
      description: Returns all certifications for a specific token
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token certifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCertifications'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /certifications/user/{address}:
    get:
      tags: [Certifications]
      summary: Get user certifications
      description: Returns all certifications for a user's address
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: User certifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCertifications'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /certifications/approve:
    post:
      tags: [Certifications]
      summary: Approve certification
      description: Approves a certification for a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveCertificationRequest'
      responses:
        200:
          description: Certification approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== MIGRATION ========================
  /nft/migrate:
    post:
      tags: [Migration]
      summary: Migrate JetCV
      description: Burns a JetCV for migration to a new contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateRequest'
      responses:
        200:
          description: JetCV migrated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrateResponse'
        400:
          description: Bad request - missing parameters or user doesn't have JetCV
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== OWNERSHIP MANAGEMENT ========================
  /contract/owner:
    get:
      tags: [Ownership]
      summary: Get contract owner
      description: Returns the current contract owner
      responses:
        200:
          description: Contract owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractOwner'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contract/transfer-ownership:
    post:
      tags: [Ownership]
      summary: Transfer ownership
      description: Transfers contract ownership to a new address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferOwnershipRequest'
      responses:
        200:
          description: Ownership transferred successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing newOwner parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contract/renounce-ownership:
    post:
      tags: [Ownership]
      summary: Renounce ownership
      description: Renounces contract ownership
      responses:
        200:
          description: Ownership renounced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== APPROVAL MANAGEMENT ========================
  /nft/token/{tokenId}/approved:
    get:
      tags: [Approvals]
      summary: Get token approval
      description: Returns the approved address for a token
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: Token approval retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenApproval'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/token/{tokenId}/approve:
    post:
      tags: [Approvals]
      summary: Approve token
      description: Approves an address to transfer a specific token
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveTokenRequest'
      responses:
        200:
          description: Token approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing 'to' parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/set-approval-for-all:
    post:
      tags: [Approvals]
      summary: Set approval for all
      description: Approves or revokes approval for all tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetApprovalForAllRequest'
      responses:
        200:
          description: Approval for all set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/is-approved-for-all:
    get:
      tags: [Approvals]
      summary: Check approval for all
      description: Checks if an operator is approved for all tokens of an owner
      parameters:
        - name: owner
          in: query
          required: true
          description: Owner address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        - name: operator
          in: query
          required: true
          description: Operator address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Approval status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsApprovedForAllResponse'
        400:
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== TRANSFER OPERATIONS ========================
  /nft/transfer:
    post:
      tags: [Transfers]
      summary: Transfer token
      description: Transfers a token from one address to another
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        200:
          description: Token transferred successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nft/safe-transfer:
    post:
      tags: [Transfers]
      summary: Safe transfer token
      description: Safely transfers a token with optional data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafeTransferRequest'
      responses:
        200:
          description: Safe transfer completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== INTERFACE SUPPORT ========================
  /contract/supports-interface:
    get:
      tags: [Interface Support]
      summary: Check interface support
      description: Checks if the contract supports a specific interface
      parameters:
        - name: interfaceId
          in: query
          required: true
          description: Interface ID to check
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{8}$'
            example: "0x80ac58cd"
      responses:
        200:
          description: Interface support status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceSupport'
        400:
          description: Bad request - missing interfaceId parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ======================== LEGACY APIs ========================
  /user/{address}/hasJetCV:
    get:
      tags: [Legacy APIs]
      summary: Check if user has JetCV (Legacy)
      description: Legacy endpoint for checking JetCV ownership
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: JetCV ownership status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasJetCVResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{address}/hasCV:
    get:
      tags: [Legacy APIs]
      summary: Check if user has CV (Legacy)
      description: Legacy endpoint for checking CV ownership
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: CV ownership status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasCVResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{address}/tokenId:
    get:
      tags: [Legacy APIs]
      summary: Get user token ID (Legacy)
      description: Legacy endpoint for getting user's token ID
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: Token ID retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenIdResponse'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cv/{tokenId}:
    get:
      tags: [Legacy APIs]
      summary: Get CV details (Legacy)
      description: Legacy endpoint for getting CV details
      parameters:
        - name: tokenId
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123"
      responses:
        200:
          description: CV details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVDetails'
        400:
          description: Invalid token ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /certifications/{address}:
    get:
      tags: [Legacy APIs]
      summary: Get user certifications (Legacy)
      description: Legacy endpoint for getting user certifications
      parameters:
        - name: address
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
            example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      responses:
        200:
          description: User certifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCertifications'
        400:
          description: Invalid address format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cv/all-tokenIds:
    get:
      tags: [Legacy APIs]
      summary: Get all token IDs (Legacy)
      description: Legacy endpoint for getting all token IDs
      responses:
        200:
          description: All token IDs retrieved successfully
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/AllTokenIds'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    # ======================== WALLET SCHEMAS ========================
    WalletCreateResponse:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        privateKey:
          type: string
          description: Private key (encrypted)
          example: "0x1234567890abcdef..."
        mnemonic:
          type: string
          description: Mnemonic phrase
          example: "word1 word2 word3 word4 word5 word6 word7 word8 word9 word10 word11 word12"
        scriptError:
          type: boolean
          description: Whether the Keycloak script had errors
          example: false
        output:
          type: string
          description: Script output
          example: "Wallet stored successfully in Keycloak"

    WalletBalance:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        balance:
          type: string
          description: MATIC balance in wei
          example: "1.234567"

    WalletSecret:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        encryptedPrivateKey:
          type: string
          description: Encrypted private key
          example: "encrypted_key_data"
        mnemonic:
          type: string
          description: Mnemonic phrase
          example: "word1 word2 word3 word4 word5 word6 word7 word8 word9 word10 word11 word12"

    TokenBalance:
      type: array
      items:
        type: object
        properties:
          token:
            type: string
            description: Token symbol
            example: "MATIC"
          balance:
            type: string
            description: Token balance
            example: "1.234567"

    # ======================== NFT SCHEMAS ========================
    ContractInfo:
      type: object
      properties:
        name:
          type: string
          description: Contract name
          example: "JetCV NFT"
        symbol:
          type: string
          description: Contract symbol
          example: "JETCV"
        version:
          type: string
          description: Contract version
          example: "1.0.0"
        contractAddress:
          type: string
          description: Contract address
          example: "0x1234567890abcdef..."

    HasJetCVResponse:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        hasJetCV:
          type: boolean
          description: Whether the user has a JetCV NFT
          example: true

    HasCVResponse:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        hasCV:
          type: boolean
          description: Whether the user has a CV
          example: true

    UserTokenIdResponse:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        tokenId:
          type: string
          description: Token ID
          example: "123"

    TokenDetails:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        owner:
          type: string
          description: Token owner address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        uri:
          type: string
          description: Token metadata URI
          example: "ipfs://QmHash..."
        userIdHash:
          type: string
          description: User ID hash
          example: "0x1234567890abcdef..."

    TokenMintedResponse:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        isMinted:
          type: boolean
          description: Whether the token is minted
          example: true

    TokenOwner:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        owner:
          type: string
          description: Token owner address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"

    TokenURI:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        uri:
          type: string
          description: Token metadata URI
          example: "ipfs://QmHash..."

    NFTBalance:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        balance:
          type: string
          description: Number of NFTs owned
          example: "1"

    AllTokenIds:
      type: object
      properties:
        tokenIds:
          type: array
          items:
            type: string
          description: Array of all token IDs
          example: ["1", "2", "3"]

    AllTokens:
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenDetails'
          description: Array of all token details

    # ======================== MINTING SCHEMAS ========================
    MintRequest:
      type: object
      required:
        - walletAddress
        - userIdHash
      properties:
        walletAddress:
          type: string
          description: Ethereum wallet address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        userIdHash:
          type: string
          description: User ID hash
          example: "0x1234567890abcdef..."

    MintResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "JetCV mintato con successo"
        tokenId:
          type: string
          description: Minted token ID
          example: "123"
        txHash:
          type: string
          description: Transaction hash
          example: "0x1234567890abcdef..."
        blockNumber:
          type: integer
          description: Block number
          example: 12345
        gasUsed:
          type: string
          description: Gas used
          example: "150000"

    # ======================== CERTIFICATION SCHEMAS ========================
    Certification:
      type: object
      properties:
        certificationIdHash:
          type: string
          description: Certification ID hash
          example: "0x1234567890abcdef..."
        legalEntityAddress:
          type: string
          description: Legal entity address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        legalEntityIdHash:
          type: string
          description: Legal entity ID hash
          example: "0x1234567890abcdef..."
        certificatorAddress:
          type: string
          description: Certificator address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        certificatorIdHash:
          type: string
          description: Certificator ID hash
          example: "0x1234567890abcdef..."
        documents:
          type: array
          items:
            type: string
          description: Array of document references
          example: ["doc1", "doc2"]
        createdAt:
          type: string
          description: Creation timestamp
          example: "1234567890"

    TokenCertifications:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
          description: Array of certifications

    UserCertifications:
      type: object
      properties:
        address:
          type: string
          description: Ethereum wallet address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        tokenId:
          type: string
          description: Token ID
          example: "123"
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
          description: Array of certifications

    ApproveCertificationRequest:
      type: object
      required:
        - walletAddress
        - tokenId
        - certificationIdHash
        - documents
        - legalEntityAddress
        - legalEntityIdHash
        - certificatorAddress
        - certificatorIdHash
      properties:
        walletAddress:
          type: string
          description: Ethereum wallet address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        tokenId:
          type: string
          description: Token ID
          example: "123"
        certificationIdHash:
          type: string
          description: Certification ID hash
          example: "0x1234567890abcdef..."
        documents:
          type: array
          items:
            type: string
          description: Array of document references
          example: ["doc1", "doc2"]
        legalEntityAddress:
          type: string
          description: Legal entity address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        legalEntityIdHash:
          type: string
          description: Legal entity ID hash
          example: "0x1234567890abcdef..."
        certificatorAddress:
          type: string
          description: Certificator address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        certificatorIdHash:
          type: string
          description: Certificator ID hash
          example: "0x1234567890abcdef..."

    # ======================== MIGRATION SCHEMAS ========================
    MigrateRequest:
      type: object
      required:
        - walletAddress
        - reason
        - newContract
      properties:
        walletAddress:
          type: string
          description: Ethereum wallet address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        reason:
          type: string
          description: Migration reason
          example: "Upgrade to v2"
        newContract:
          type: string
          description: New contract address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x1234567890abcdef..."

    MigrateResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "JetCV migrato con successo"
        tokenId:
          type: string
          description: Token ID
          example: "123"
        userIdHash:
          type: string
          description: User ID hash
          example: "0x1234567890abcdef..."
        txHash:
          type: string
          description: Transaction hash
          example: "0x1234567890abcdef..."
        blockNumber:
          type: integer
          description: Block number
          example: 12345
        gasUsed:
          type: string
          description: Gas used
          example: "100000"

    # ======================== OWNERSHIP SCHEMAS ========================
    ContractOwner:
      type: object
      properties:
        owner:
          type: string
          description: Contract owner address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"

    TransferOwnershipRequest:
      type: object
      required:
        - newOwner
      properties:
        newOwner:
          type: string
          description: New owner address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"

    # ======================== APPROVAL SCHEMAS ========================
    TokenApproval:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        approved:
          type: string
          description: Approved address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"

    ApproveTokenRequest:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: Address to approve
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"

    SetApprovalForAllRequest:
      type: object
      required:
        - operator
        - approved
      properties:
        operator:
          type: string
          description: Operator address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        approved:
          type: boolean
          description: Whether to approve or revoke
          example: true

    IsApprovedForAllResponse:
      type: object
      properties:
        owner:
          type: string
          description: Owner address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        operator:
          type: string
          description: Operator address
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        isApproved:
          type: boolean
          description: Whether operator is approved for all tokens
          example: true

    # ======================== TRANSFER SCHEMAS ========================
    TransferRequest:
      type: object
      required:
        - from
        - to
        - tokenId
      properties:
        from:
          type: string
          description: Source address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        to:
          type: string
          description: Destination address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x1234567890abcdef..."
        tokenId:
          type: string
          description: Token ID
          example: "123"

    SafeTransferRequest:
      type: object
      required:
        - from
        - to
        - tokenId
      properties:
        from:
          type: string
          description: Source address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        to:
          type: string
          description: Destination address
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0x1234567890abcdef..."
        tokenId:
          type: string
          description: Token ID
          example: "123"
        data:
          type: string
          description: Optional data for safe transfer
          example: "0x1234567890abcdef..."

    # ======================== INTERFACE SUPPORT SCHEMAS ========================
    InterfaceSupport:
      type: object
      properties:
        interfaceId:
          type: string
          description: Interface ID
          example: "0x80ac58cd"
        supports:
          type: boolean
          description: Whether the interface is supported
          example: true

    # ======================== GAS ESTIMATION SCHEMAS ========================
    GasBalance:
      type: object
      properties:
        address:
          type: string
          description: Wallet address
          example: "0x971b90678bED62982f34Fe8eB756fF02F322fA19"
        balance:
          type: string
          description: Balance in wei
          example: "1000000000000000000"
        balanceEth:
          type: string
          description: Balance in ETH
          example: "1.0"
        gasPrice:
          type: string
          description: Current gas price in wei
          example: "20000000000"
        gasPriceGwei:
          type: string
          description: Current gas price in gwei
          example: "20"

    GasEstimation:
      type: object
      properties:
        estimatedGas:
          type: string
          description: Estimated gas units needed
          example: "150000"
        gasPrice:
          type: string
          description: Current gas price in wei
          example: "20000000000"
        estimatedCost:
          type: string
          description: Estimated cost in wei
          example: "3000000000000000"
        estimatedCostEth:
          type: string
          description: Estimated cost in ETH
          example: "0.003"

    # ======================== LEGACY SCHEMAS ========================
    CVDetails:
      type: object
      properties:
        tokenId:
          type: string
          description: Token ID
          example: "123"
        owner:
          type: string
          description: Token owner
          example: "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
        uri:
          type: string
          description: Token URI
          example: "ipfs://QmHash..."
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
          description: Array of certifications

    # ======================== TRANSACTION RESPONSE SCHEMAS ========================
    TransactionResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"
        txHash:
          type: string
          description: Transaction hash
          example: "0x1234567890abcdef..."
        blockNumber:
          type: integer
          description: Block number
          example: 12345
        gasUsed:
          type: string
          description: Gas used
          example: "150000"

    # ======================== ERROR SCHEMAS ========================
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid address format"