openapi: 3.0.0
info:
  title: JetCV API
  description: API per gestione utenti, wallet e funzionalità blockchain JetCV
  version: 1.2.0

servers:
  - url: http://localhost:4000/api

tags:
  - name: User
    description: API gestione utenti (Prisma)
  - name: Wallet
    description: API gestione wallet (Prisma)
  - name: Wallet Home
    description: API blockchain (mint NFT, certificazioni)

paths:
  /users:
    post:
      tags: [User]
      summary: Crea un nuovo utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email]
              properties:
                id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
                name:
                  type: string
                  example: Mario Rossi
                email:
                  type: string
                  format: email
                  example: mario.rossi@example.com
      responses:
        201:
          description: Utente creato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      tags: [User]
      summary: Lista utenti
      responses:
        200:
          description: Lista di utenti
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      tags: [User]
      summary: Ottieni utente e wallet
      parameters:
        - name: id
          in: path
          schema: { type: string, format: uuid }
          required: true
      responses:
        200:
          description: Dettaglio utente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithWallets"
    put:
      tags: [User]
      summary: Aggiorna utente
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        200:
          description: Utente aggiornato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags: [User]
      summary: Elimina utente
      parameters:
        - name: id
          in: path
          schema: { type: string, format: uuid }
      responses:
        200:
          description: Eliminazione riuscita

  /wallets:
    post:
      tags: [Wallet]
      summary: Crea un nuovo wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, address, privateKey]
              properties:
                userId:
                  type: string
                  format: uuid
                address:
                  type: string
                privateKey:
                  type: string
                mnemonic:
                  type: string
      responses:
        201:
          description: Wallet creato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
    get:
      tags: [Wallet]
      summary: Lista di tutti i wallet
      responses:
        200:
          description: Lista wallet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wallet"

  /wallets/{id}:
    get:
      tags: [Wallet]
      summary: Ottieni un wallet
      parameters:
        - name: id
          in: path
          schema: { type: string, format: uuid }
      responses:
        200:
          description: Dettaglio wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
    put:
      tags: [Wallet]
      summary: Aggiorna wallet
      parameters:
        - name: id
          in: path
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WalletUpdate"
      responses:
        200:
          description: Wallet aggiornato
    delete:
      tags: [Wallet]
      summary: Elimina wallet
      parameters:
        - name: id
          in: path
          schema: { type: string, format: uuid }
      responses:
        200:
          description: Wallet eliminato

  /wallets/user/{userId}:
    get:
      tags: [Wallet]
      summary: Lista wallet per utente
      parameters:
        - name: userId
          in: path
          schema: { type: string, format: uuid }
      responses:
        200:
          description: Lista wallet utente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wallet"

  /cv/mint:
    post:
      tags: [Wallet Home]
      summary: Mint NFT per un utente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [address, uri]
              properties:
                address:
                  type: string
                  example: "0xabc123..."
                uri:
                  type: string
                  example: "ipfs://Qm12345..."
      responses:
        201:
          description: NFT mintato
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Mint completato }
                  tokenId: { type: string }
                  txHash: { type: string }

  /cv/{tokenId}/update:
    post:
      tags: [Wallet Home]
      summary: Aggiorna NFT (nuovo URI IPFS)
      parameters:
        - name: tokenId
          in: path
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user: { type: string, example: "0xabc123..." }
                newURI: { type: string, example: "ipfs://Qm98765..." }
      responses:
        200:
          description: NFT aggiornato

  /user/{address}/hasJetCV:
    get:
      tags: [Wallet Home]
      summary: Controlla se l'utente ha già un JetCV
      parameters:
        - name: address
          in: path
          schema: { type: string }
      responses:
        200:
          description: Risultato
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  hasJetCV: { type: boolean }

  /user/{address}/tokenId:
    get:
      tags: [Wallet Home]
      summary: Ottieni il tokenId per un utente
      parameters:
        - name: address
          in: path
          schema: { type: string }
      responses:
        200:
          description: Token ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  address: { type: string }
                  tokenId: { type: string }

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string }
        createdAt: { type: string, format: date-time }
    UserUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
    UserWithWallets:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            wallets:
              type: array
              items:
                $ref: "#/components/schemas/Wallet"
    Wallet:
      type: object
      properties:
        id: { type: string, format: uuid }
        address: { type: string }
        createdAt: { type: string, format: date-time }
        user:
          $ref: "#/components/schemas/User"
    WalletUpdate:
      type: object
      properties:
        address: { type: string }
        privateKey: { type: string }
        mnemonic: { type: string }
